/** * 拖拽控制上下文 */import {bindTag, isItemTagged} from "./ClipboardDataContext.ts";import {reactive} from "vue";// 拖拽状态export const dragState = reactive({    isDragging: false,    dragItemId: -1,    draggedOverTagId: -1});/** * 文本内容拖拽 */export function contentDragStart(item: ClipboardItem, event: DragEvent) {    // 设置拖拽数据    if (event.dataTransfer) {        event.dataTransfer.setData('text/plain', item.content);        event.dataTransfer.effectAllowed = 'link';    }}// 处理拖拽开始事件export function handleDragStart(itemId: number, event: DragEvent) {    dragState.isDragging = true;    dragState.dragItemId = itemId;    // 设置拖拽数据    if (event.dataTransfer) {        event.dataTransfer.setData('text/plain', itemId.toString());        event.dataTransfer.effectAllowed = 'link';    }}// 处理拖拽结束事件export function handleDragEnd() {    dragState.isDragging = false;    dragState.dragItemId = -1;    dragState.draggedOverTagId = -1;}// 处理拖拽进入标签事件export function handleDragEnterTag(tagId: number) {    dragState.draggedOverTagId = tagId;    // 如果项目已经绑定了该标签，则不允许再次绑定    if (dragState.dragItemId !== -1 && isItemTagged(dragState.dragItemId, tagId)) {        return;    }}// 处理拖拽离开标签事件export function handleDragLeaveTag(event: DragEvent) {    // 检查是否直接拖拽到了另一个标签上    // 只有当不是拖拽到其他标签元素上时，才清除draggedOverTagId    const relatedTarget = event.relatedTarget as HTMLElement;    if (!relatedTarget || !relatedTarget.closest('.tag-item')) {        dragState.draggedOverTagId = -1;    }}// 处理拖拽放置事件export async function handleDropOnTag(tagId: number) {    if (dragState.dragItemId !== -1) {        // 调用绑定标签接口        await bindTag(dragState.dragItemId, tagId);        // 重置拖拽状态        handleDragEnd();    }}