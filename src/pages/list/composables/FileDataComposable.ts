import {exists, readDir} from "@tauri-apps/plugin-fs";import {ref} from "vue";import {initSettings} from "../../../store/Settings.ts";import {initShortcutKeys} from "../../../store/ShortcutKeys.ts";import {filePathConvertFileName} from "../../../utils/TextUtil.ts";/** * 文件是否存在缓存，用于存储文件是否存在状态 */export const fileExistCache = ref(new Map<string, boolean>());/** * 判断文件是否为文件夹，用于存储文件是否为文件夹状态 */export const isFolderCache = ref(new Map<string, boolean>());/** * 检查文件是否存在 * @param filePaths 文件路径列表 */export function checkFileExist(filePaths: string) {    console.log('检查文件是否存在:', filePaths)    if (!filePaths) {        return;    }    const filePathList: Array<string> = JSON.parse(filePaths);    if (filePathList.length === 1) {        const filePath: string = filePathList[0];        loadFileExist(filePath);        loadFileIsFolder(filePath);    } else {        filePathList.forEach(filePath => {            loadFileExist(filePath);            loadFileIsFolder(filePath);        });    }}/** * 加载文件是否存在 * @param filePath 文件路径 */async function loadFileExist(filePath: string) {    if (!filePath) {        return;    }    console.log('文件是否存在:', filePath)    try {        fileExistCache.value.set(filePath, await exists(filePath));    } catch (e) {        console.error('检查文件是否存在失败:', e);    }}/** * 加载文件夹是否存在 * @param filePath 文件路径 */async function loadFileIsFolder(filePath: string) {    if (!filePath) {        return;    }    const fileName = filePathConvertFileName(filePath);    // 如果文件名包含"."，则不是文件夹    if (fileName.includes(".")) {        return;    }    console.log('文件夹是否存在:', filePath)    try {        isFolderCache.value.set(filePath, await readDir(filePath) !== null);        console.log('文件夹是否存在:', isFolderCache.value.get(filePath))    } catch (e) {        console.error('检查文件是否存在失败:', e);    }}/** * 初始化用户设置 */export async function initUserSettings() {    await initSettings();    await initShortcutKeys();}/** * 定时检查文件是否存在 */let fileExistTimer: any = null;function initFileExistTimer() {    return setInterval(async () => {        fileExistCache.value.forEach((_value, key) => {            loadFileExist(key);        })    }, 1000 * 60); // 时间可调整}/** * 初始化文件数据配置 */export function initializeFileData() {    // 初始化文件是否存在定时任务    fileExistTimer = initFileExistTimer();}/** * 销毁文件数据配置 */export function destroyFileData() {    // 清除文件是否存在定时任务    if (fileExistTimer) {        clearInterval(fileExistTimer);    }}