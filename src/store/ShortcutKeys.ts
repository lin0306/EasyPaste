import {load} from "@tauri-apps/plugin-store";import {info} from "@tauri-apps/plugin-log";import {BaseDirectory, exists, readFile, remove} from "@tauri-apps/plugin-fs";import {uint8ArrayToString} from "../utils/strUtil.ts";const fileName = "shortcutKeys.json";const defaultShortcutKeys: ShortcutKeys = {    search: {        name: "搜索",        key: [            "ctrl",            "f"        ]    },    wakeUpRoutine: {        name: "唤醒程序",        key: [            "alt",            "c"        ]    }}/** * 判断配置文件是否存在 */export async function hasShortcutKeys() {    const store = await load(fileName);    return (await store.get("search")) !== undefined;}/** * 保存搜索快捷键 * @param keys 快捷键 */export async function saveSearchKey(keys: any) {    info("保存搜索快捷键" + JSON.stringify(keys))    const settings = await load(fileName, {autoSave: true});    await settings.set("search", keys);}/** * 获取搜索快捷键 */export async function getSearchKey(): Promise<ShortcutKeys['search']> {    const settings = await load(fileName, {autoSave: true});    if (settings === null) {        await info("搜索快捷键未设置，使用默认值");        await saveSearchKey(defaultShortcutKeys.search);        return defaultShortcutKeys.search;    }    const search = await settings.get<ShortcutKeys['search']>("search");    if (search === undefined) {        await info("搜索快捷键未设置，使用默认值");        await saveSearchKey(defaultShortcutKeys.search);        return defaultShortcutKeys.search;    }    return search;}/** * 保存唤醒程序快捷键 * @param keys 快捷键 */export async function saveWakeUpRoutineKey(keys: any) {    info("保存唤醒程序快捷键" + JSON.stringify(keys))    const settings = await load(fileName, {autoSave: true});    await settings.set("wakeUpRoutine", keys);}/** * 获取唤醒程序快捷键 */export async function getWakeUpRoutine(): Promise<ShortcutKeys['wakeUpRoutine']> {    const settings = await load(fileName, {autoSave: true});    if (settings === null) {        await info("唤醒程序快捷键未设置，使用默认值");        await saveWakeUpRoutineKey(defaultShortcutKeys.wakeUpRoutine);        return defaultShortcutKeys.wakeUpRoutine;    }    const wakeUpRoutine = await settings.get<ShortcutKeys['wakeUpRoutine']>("wakeUpRoutine");    if (wakeUpRoutine === undefined) {        await info("唤醒程序快捷键未设置，使用默认值");        await saveWakeUpRoutineKey(defaultShortcutKeys.wakeUpRoutine);        return defaultShortcutKeys.wakeUpRoutine;    }    return wakeUpRoutine;}/** * 填充快捷键配置 * @deprecated */export async function fillKeyData() {    if (!(await hasShortcutKeys())) {        const userShortcutKeysExists = await exists('userShortcutKeys.json', {            baseDir: BaseDirectory.AppData,        })        if (userShortcutKeysExists) {            await info("程序第一次启动，从旧版本升级到新版本，填充快捷键配置store");            // 将用户快捷键的管理方式从json文件数据替换成store            const userShortcutKeys = await readFile('userShortcutKeys.json', {                baseDir: BaseDirectory.AppData,            })            // 转成字符串            const userShortcutKeysString = uint8ArrayToString(userShortcutKeys);            const userShortcutKeysJson = JSON.parse(userShortcutKeysString);            if (userShortcutKeysString.includes("search")) {                await saveSearchKey(userShortcutKeysJson.search);            } else {                await saveSearchKey(defaultShortcutKeys.search);            }            if (userShortcutKeysString.includes("wakeUpRoutine")) {                await saveWakeUpRoutineKey(userShortcutKeysJson.wakeUpRoutine);            } else {                await saveWakeUpRoutineKey(defaultShortcutKeys.wakeUpRoutine);            }            // 删除文件            await remove('userShortcutKeys.json', {                baseDir: BaseDirectory.AppData,            })        }    }}