import {isMac} from "../data/SystemParams.ts";import {textMimeTypes} from "../constants/FileTypeConstatnts.ts";/** * 判断文件是否是文本文件 * @param filePath 文件路径 */export function isText(filePath: string) {    const suffix = filePath.toLowerCase().split('.').pop() || '';    return textMimeTypes[suffix] !== undefined;}/** * 文件类型是否为纯文本 * @param filePath 文件路径 */export function isPlainText(filePath: string) {    const suffix = filePath.toLowerCase().split('.').pop() || '';    return textMimeTypes[suffix] === 'text/plain' || textMimeTypes[suffix] === 'text/tab-separated-values'  || textMimeTypes[suffix] === 'text/csv';}/** * 判断文件是否是Markdown文件 * @param filePath 文件路径 */export function isMarkdown(filePath: string) {    return filePath.toLowerCase().endsWith('.md') || filePath.toLowerCase().endsWith('.markdown');}/** * 判断文件是否是RTF文件 * @param filePath 文件路径 */export function isRTF(filePath: string) {    return filePath.toLowerCase().endsWith('.rtf');}/** * 获取文件类型 * @param filePath 文件路径 */export function getType(filePath: string) {    const ext = filePath.split('.').pop() || '';    return textMimeTypes[ext] || '';}/** * 判断文本是否是代码 * @param text 文本内容 */export function isCode(text: string) {    // 空内容直接返回    if (!text) return false;    // 特征权重计分    let score = 0;    // 1. 检查关键字    const keywords = ['function', 'var', 'const', 'if', 'for', 'return', 'class'];    if (keywords.some(kw => text.includes(kw))) score += 2;    // 2. 检查特殊符号    const symbols = ['{', '}', ';', '=', '(', ')', '<', '>'];    if (symbols.some(sym => text.includes(sym))) score += 1;    // 3. 检查注释    if (text.includes('//') || text.includes('/*')) score += 2;    // 4. 检查缩进（代码通常有规律缩进）    const lines = text.split('\n');    if (lines.length > 1) {        const indentCount = lines.filter(line => line.startsWith('  ') || line.startsWith('\t')).length;        if (indentCount > lines.length * 0.5) score += 1;    }    // 阈值判定（可根据需求调整）    return score >= 1;}/** * 文件路径转文件名 * @param filePath 文件路径 * @return 文件名 */export function filePathConvertFileName(filePath: string): string {    // windows是斜杠    const strArr = filePath.split("\\");    if (isMac) {        // mac是反斜杠        return filePath.split("/").pop() || filePath;    }    return strArr.pop() || filePath;}