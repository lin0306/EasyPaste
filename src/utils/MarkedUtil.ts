import {marked, Tokens} from "marked";import {convertFileSrc} from "@tauri-apps/api/core";/** * 获取 marked 渲染器 * @param bashPath 文件夹路径，非必填项 */export function getRenderer(bashPath: string | undefined = undefined) {    const renderer = new marked.Renderer();    /**     * 图片展示处理     */    renderer.image = (info: Tokens.Image) => {        // 外网访问不做处理        if (info.href.startsWith("http://") || info.href.startsWith("https://")) {            return `<img src="${info.href}" width="100%" alt="${info.text}" title="${info.title}">`;        }        // 相对路径处理        if (bashPath && (info.href.startsWith("./") || info.href.startsWith("../"))) {            const folderPath = bashPath.substring(0, bashPath.lastIndexOf('/'));            if (info.href.startsWith("./")) {                return `<img src="${convertFileSrc(folderPath + info.href.substring(2))}"  width="100%" alt="${info.text}" title="${info.title}">`;            } else {                const {                    url,                    path                } = removeRelativePath(info.href.substring(3), folderPath.substring(0, folderPath.lastIndexOf('/')));                return `<img src="${convertFileSrc(path + url)}" width="100%" alt="${info.text}" title="${info.title}">`;            }        }        // 其他方式暂时直接转换        return `<img src="${convertFileSrc(info.href)}" width="100%" alt="${info.text}" title="${info.title}">`;    }    /**     * 链接点击处理     * @param info     */    renderer.link = (info: Tokens.Link) => {        return `        <a          href="${info.href}"          target="_blank"          onclick="event.preventDefault(); window.__TAURI__.shell.open('${info.href}')"        >          ${info.text}        </a>      `;    }    return renderer;}/** * 处理markdown中的文件相对路径 * @param folderPath 文件夹绝对路径 * @param fileRelativePath 文件相对路径 */function removeRelativePath(folderPath: string, fileRelativePath: string) {    if (folderPath.startsWith("../")) {        folderPath = folderPath.substring(3);        fileRelativePath = fileRelativePath.substring(0, fileRelativePath.lastIndexOf('/'));    }    if (folderPath.startsWith("../")) {        removeRelativePath(folderPath, fileRelativePath);    }    return {url: folderPath, path: fileRelativePath};}