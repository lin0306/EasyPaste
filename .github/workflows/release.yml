name: Tauri 2 Release

# 设置触发条件
on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  # 设置运行环境
  setup:
    name: Setup environment
    runs-on: ubuntu-latest
    steps:
      # 拉取项目代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

  # 项目打包
  build:
    needs: setup
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, windows-latest ]
        include:
          - platform: macos-latest
            rust-target: aarch64-apple-darwin
            system-deps: |
              brew update
              brew install create-dmg
          - platform: windows-latest
            rust-target: x86_64-pc-windows-msvc
            system-deps: |
              choco install -y wixtoolset

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0

      - name: Install rust target
        run: rustup target add ${{ matrix.rust-target }}

      # 安装 Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # 使用 Rust 缓存，加快安装速度
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: target

      # 获取 pnpm 缓存
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # 安装依赖, 前端打包
      - name: Install app dependencies and build web
        run: pnpm install --frozen-lockfile

      # 构建 Tauri 应用
      - name: Build Tauri application
        run: pnpm tauri build --target ${{ matrix.rust-target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      # 上传构建结果
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/**/*.exe
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/**/*.dmg
            src-tauri/target/${{ matrix.rust-target }}/release/bundle/**/*.sig

  # 代码发布
  release:
    needs: [ setup, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 GitHub release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "App ${{ github.ref_name }}"
          body: "Built with Tauri 2 | See assets to download"
          draft: true # 是否生成release草稿
          prerelease: false # 是否生成预发布包
          files: |
            artifacts/**/*

  update_latest_json:
    needs: [setup, build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return {
              version: response.data.tag_name,
              notes: response.data.body,
              pub_date: new Date().toISOString()
            };

      - name: Find release assets and signatures
        id: find_assets
        run: |
          # 查找不同平台的构建产物
          AARCH64_DARWIN=$(find artifacts/release-macos-latest/ -name "*.dmg" | head -1 || echo '')
          WIN64_DARWIN=$(find artifacts/release-windows-latest/ -name "*.exe" | head -1 || echo '')
          
          # 获取下载URL（使用gh-proxy.com镜像）
          AARCH64_DARWIN_URL="https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename "$AARCH64_DARWIN")"
          WIN64_DARWIN_URL="https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(basename "$WIN64_DARWIN")"
          
          # 获取签名内容（查找对应的.sig文件并读取内容）
          AARCH64_DARWIN_SIG=""
          WIN64_DARWIN_SIG=""
          
          # 查找并读取macOS签名文件
          if [ -n "$AARCH64_DARWIN" ]; then
            SIG_FILE=$(find artifacts/release-macos-latest/ -name "*.sig" | head -1)
            if [ -n "$SIG_FILE" ]; then
              AARCH64_DARWIN_SIG=$(cat "$SIG_FILE" | tr -d '\n')
            fi
          fi
          
          # 查找并读取Windows签名文件
          if [ -n "$WIN64_DARWIN" ]; then
            SIG_FILE=$(find artifacts/release-windows-latest/ -name "*.sig" | head -1)
            if [ -n "$SIG_FILE" ]; then
              WIN64_DARWIN_SIG=$(cat "$SIG_FILE" | tr -d '\n')
            fi
          fi
          
          # 生成platforms JSON
          PLATFORMS_JSON=$(jq -n \
            --arg aarch64_darwin_url "$AARCH64_DARWIN_URL" \
            --arg win64_darwin_url "$WIN64_DARWIN_URL" \
            --arg aarch64_darwin_sig "$AARCH64_DARWIN_SIG" \
            --arg win64_darwin_sig "$WIN64_DARWIN_SIG" \
            '{
              "darwin-aarch64": if $aarch64_darwin_url != "" then {
                signature: $aarch64_darwin_sig,
                url: $aarch64_darwin_url
              } else null end,
              "windows-x86_64": if $win64_darwin_url != "" then {
                signature: $win64_darwin_sig,
                url: $win64_darwin_url
              } else null end
            }')
          
          echo "PLATFORMS_JSON=$PLATFORMS_JSON" >> $GITHUB_OUTPUT

      - name: Update latest.json
        run: |
          # 合并所有信息到latest.json
          jq -n \
            --arg version "${{ steps.get_release.outputs.version }}" \
            --arg notes "${{ steps.get_release.outputs.notes }}" \
            --arg pub_date "${{ steps.get_release.outputs.pub_date }}" \
            --argjson platforms "${{ steps.find_assets.outputs.PLATFORMS_JSON }}" \
            '{
              version: $version,
              notes: $notes,
              pub_date: $pub_date,
              platforms: $platforms
            }' > latest.json
          
          cat latest.json

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add latest.json
          git commit -m "Update latest.json for release ${{ steps.get_release.outputs.version }}"
          git push