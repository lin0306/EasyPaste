name: Tauri 2 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]
        include:
          - platform: ubuntu-22.04
            rust-target: x86_64-unknown-linux-gnu
            system-deps: |
              sudo apt-get update
              sudo apt-get install -y \
                libgtk-3-dev \
                libwebkit2gtk-4.1-dev \
                librsvg2-dev \
                libayatana-appindicator3-dev
          - platform: macos-latest
            rust-target: aarch64-apple-darwin
            system-deps: |
              brew update
              brew install create-dmg
          - platform: windows-latest
            rust-target: x86_64-pc-windows-msvc
            system-deps: |
              choco install -y wixtoolset

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: ${{ matrix.system-deps }}
        if: matrix.system-deps != ''

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.rust-target }}

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
            src-tauri/target

      # 直接安装特定版本的 Tauri CLI
      - name: Install Tauri CLI
        run: |
          echo "Installing tauri-cli@2.5.0"
          cargo install tauri-cli --version 2.5.0
          
          # 验证安装
          echo "Tauri CLI version:"
          cargo tauri --version
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm globally
        run: |
          npm install -g pnpm@8
          echo "PNPM_VERSION=$(pnpm --version)" >> $GITHUB_ENV
        shell: bash

      - name: Configure pnpm store
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV
        shell: bash

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # 解决 macOS 和 Windows 的 lockfile 问题
      - name: Verify lockfile
        run: |
          echo "Checking lockfile..."
          if [ -f "pnpm-lock.yaml" ]; then
            echo "pnpm-lock.yaml exists"
          else
            echo "pnpm-lock.yaml does not exist - generating a new one"
            pnpm install --lockfile-only
          fi
        shell: bash

      # 修复的依赖安装命令
      - name: Install frontend dependencies
        run: |
          # 使用更安全的安装方式
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with existing lockfile"
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
          else
            echo "Installing without lockfile"
            pnpm install
          fi
        shell: bash

      - name: Build frontend
        run: pnpm build
        env:
          NODE_ENV: production

      # 使用正确的 Tauri 构建命令
      - name: Build Tauri application
        run: |
          pnpm tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/*.app
            src-tauri/target/release/bundle/*.dmg
            src-tauri/target/release/bundle/*.tar.gz
            src-tauri/target/release/bundle/*.msi
            src-tauri/target/release/bundle/*.exe
            src-tauri/target/release/bundle/*.AppImage
            src-tauri/target/release/bundle/*.deb

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: matrix.platform == 'ubuntu-22.04'
        with:
          tag_name: ${{ github.ref_name }}
          name: "App v${{ github.ref_name }}"
          body: "Built with Tauri 2 | See assets to download"
          draft: true
          prerelease: false
          files: |
            src-tauri/target/release/bundle/**/*