name: Tauri 2 Release

# 设置触发条件
on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  # 设置运行环境
  setup:
    name: Setup environment
    runs-on: ubuntu-22.04
    outputs:
      node-modules-cache-key: ${{ steps.node-modules-cache.outputs.cache-key }}
      rust-cache-key: ${{ steps.rust-cache.outputs.cache-key }}
    steps:
      # 拉取项目代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 全局安装 pnpm
      - name: Install pnpm globally
        run: npm install -g pnpm@8

      # 换成pnpm store
      - name: Get pnpm store path
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # 缓存 node_modules
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 缓存 node_modules
      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # 安装 Rust
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust@v1
        with:
          rust-version: stable  # 或指定版本如 "1.75.0"
          targets: |
            aarch64-apple-darwin
            x86_64-pc-windows-msvc

      # 缓存 Rust 依赖
      - name: Cache Rust dependencies
        id: rust-cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
            src-tauri/target

      # 安装 Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli --version 2.5.0

  # 项目打包
  build:
    needs: setup
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, windows-latest ]
        include:
          - platform: macos-latest
            rust-target: aarch64-apple-darwin
            system-deps: |
              brew update
              brew install create-dmg
          - platform: windows-latest
            rust-target: x86_64-pc-windows-msvc
            system-deps: |
              choco install -y wixtoolset

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 恢复 pnpm store 缓存
      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store  # 或 ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 恢复 node_modules 缓存
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # 安装依赖包
      - name: Install dependencies
        run: pnpm install

      # 安装系统依赖包
      - name: Install system dependencies
        run: ${{ matrix.system-deps }}
        if: matrix.system-deps != ''

      # 构建 Tauri 应用
      - name: Build Tauri application
        run: pnpm tauri build --target ${{ matrix.rust-target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      # 上传构建结果
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/*.app
            src-tauri/target/release/bundle/*.dmg
            src-tauri/target/release/bundle/*.tar.gz
            src-tauri/target/release/bundle/*.msi
            src-tauri/target/release/bundle/*.exe

  # 代码发布
  release:
    needs: [ setup, build ]
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 GitHub release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "App ${{ github.ref_name }}"
          body: "Built with Tauri 2 | See assets to download"
          draft: true # 是否生成release草稿
          prerelease: false # 是否生成预发布包
          files: |
            src-tauri/target/release/bundle/**/*